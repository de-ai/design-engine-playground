let chalk,fetch,fs,path,projectName,promisify;_ee2‍.x([["syncPlayground",()=>syncPlayground]]);_ee2‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_ee2‍.w("node-fetch",[["default",["fetch"],function(v){fetch=v}]]);_ee2‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_ee2‍.w("path",[["default",["path"],function(v){path=v}]]);_ee2‍.w("project-name",[["default",["projectName"],function(v){projectName=v}]]);_ee2‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);








const access = promisify(fs.access);

const API_ENDPT_URL = 'https://api.designengine.ai/playground.php';


const getCache = async(key)=> {
	const plat = process.platform;
	const appName = [...projectName().split('/')].pop();
	const homeDir = process.env[(plat === 'win32') ? 'USERPROFILE' : 'HOME'];
	const appDir = (plat === 'win32') ? path.join(homeDir, 'AppData', appName) : path.join(homeDir, `.${appName}`);
	const cachePath = path.join(appDir, 'caches');

	if (!fs.existsSync(cachePath)) {
		fs.readFile(cachePath, 'utf8', (err, contents)=> {
			return (contents);
		});

	} else {
		return (null);
	}
};


const writeCache = async(key, val)=> {
	const plat = process.platform;
	const appName = [...projectName().split('/')].pop();
	const homeDir = process.env[(plat === 'win32') ? 'USERPROFILE' : 'HOME'];
	const appDir = (plat === 'win32') ? path.join(homeDir, 'AppData', appName) : path.join(homeDir, `.${appName}`);
	const cachePath = path.join(appDir, 'caches');

	if (!fs.existsSync(appDir)) {
		fs.mkdir(appDir, (err)=> {
			fs.writeFile(cachePath, JSON.stringify({ [key] : val }), (err)=> {});
		})

	} else {
		fs.writeFile(cachePath, JSON.stringify({ [key] : val }), (err)=> {});
	}
};


async function queryPlayground(playgroundID) {
	let response = await fetch(API_ENDPT_URL, {
		method  : 'POST',
		headers : {
			'Content-Type' : 'application/json'
		},
		body    : JSON.stringify({
			action        : 'PLAYGROUND',
			playground_id : playgroundID,
			title         : projectName()
		})
	});

	try {
		response = await response.json();

	} catch (e) {
		_ee2‍.g.console.log('%s Couldn\'t parse response! %s', chalk.red.bold('ERROR'), e);
	}

//  console.log('PLAYGROUND -->>', response);
	return (response);
}

       async function syncPlayground(options) {
	try {
		await access(`${process.cwd()}/build`, fs.constants.R_OK);

	} catch (e) {
		_ee2‍.g.console.log('%s Couldn\'t find build dir! %s', chalk.red.bold('ERROR'), e);
		process.exit(1);
	}

	_ee2‍.g.console.log('%s Queueing playground…', chalk.cyan.bold('INFO'));

	let response = null;
	try {
		response = await queryPlayground(1);

	} catch (e) {
		_ee2‍.g.console.log('%s Error querying server! %s', chalk.red.bold('ERROR'), e);
		process.exit(1);
	}

	const playground = { ...response.playground,
		id  : response.playground.id << 0,
		new : response.playground.is_new
	};

//	console.log(response, '-->', playground);

	await writeCache('playground_id', playground.id);


	_ee2‍.g.console.log('%s Compressing files…', chalk.cyan.bold('INFO'));
	_ee2‍.g.console.log('%s Sending zip…', chalk.cyan.bold('INFO'));


	_ee2‍.g.console.log('%s Playground %s! %s', chalk.green.bold('DONE'), (playground), `https://playground.designengine.ai/${playground.id}`);
	return (true);
}
